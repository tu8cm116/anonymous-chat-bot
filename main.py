import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from dotenv import load_dotenv
from database import *

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_ID = 684261784

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="–ú–æ–π ID")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_searching_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        input_field_placeholder="–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
    )

def get_chat_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–æ–ø"), KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π")],
            [KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ ---
async def check_ban(user_id):
    if await is_banned(user_id):
        await bot.send_message(user_id, "–¢—ã –∑–∞–±–∞–Ω–µ–Ω. –û–±–∂–∞–ª—É–π —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return True
    return False

# --- –û–ß–ï–†–ï–î–¨ ---
searching_queue = []

# --- –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ---
async def start_search_loop():
    while True:
        if len(searching_queue) >= 2:
            user1 = searching_queue.pop(0)
            user2 = searching_queue.pop(0)
            
            await update_user(user1, partner_id=user2, state='chat')
            await update_user(user2, partner_id=user1, state='chat')
            
            await bot.send_message(user1, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏.", reply_markup=get_chat_menu())
            await bot.send_message(user2, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏.", reply_markup=get_chat_menu())
        else:
            await asyncio.sleep(1)

# --- –°–¢–ê–†–¢ ---
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if await check_ban(user_id):
        return
    await update_user(user_id, state='menu')
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –Ω–∞ –¥–≤–æ–∏—Ö\n\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏\n"
        "‚Ä¢ –ë–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
        reply_markup=get_main_menu()
    )

# --- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ---
@dp.message(lambda m: m.text == "–ú–æ–π ID")
async def my_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π ID: {message.from_user.id}")

@dp.message(lambda m: m.text == "–ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: types.Message):
    await message.answer(
        "–ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ—Ç –º–∞—Ç–∞\n2. –ù–µ—Ç —Å–ø–∞–º–∞\n3. –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã\n4. –£–≤–∞–∂–µ–Ω–∏–µ\n\n–ù–∞—Ä—É—à–µ–Ω–∏–µ = –±–∞–Ω",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

@dp.message(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await update_user(message.from_user.id, state='menu')
    await message.answer("–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=get_main_menu())

# --- –°–ü–ò–°–û–ö –ú–û–î–ï–†–ê–¢–û–†–û–í ---
MODERATORS = [684261784]  # —Å—é–¥–∞ –¥–æ–±–∞–≤—å —Å–≤–æ–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# --- –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–ï–†–ê ---
moderator_mode = {}

# --- –í–•–û–î –í –†–ï–ñ–ò–ú –ú–û–î–ï–†–ê–¢–û–†–ê ---
@dp.message(Command("–º–æ–¥–µ—Ä–∞—Ç–æ—Ä"))
async def moderator_login(message: types.Message):
    user_id = message.from_user.id
    if user_id not in MODERATORS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    moderator_mode[user_id] = True
    await message.answer(
        "‚úÖ –†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–∂–∞–ª–æ–±—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∂–∞–ª–æ–±\n"
        "/–±–∞–Ω—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
        "/–±–∞–Ω <id> ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/–∞–Ω–±–∞–Ω <id> ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/–≤—ã–π—Ç–∏ ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    )

# --- –í–´–•–û–î –ò–ó –†–ï–ñ–ò–ú–ê ---
@dp.message(Command("–≤—ã–π—Ç–∏"))
async def moderator_exit(message: types.Message):
    if message.from_user.id in moderator_mode:
        del moderator_mode[message.from_user.id]
        await message.answer("üëã –†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á—ë–Ω.")
    else:
        await message.answer("–¢—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")

# --- –ü–†–û–°–ú–û–¢–† –ñ–ê–õ–û–ë ---
@dp.message(Command("–∂–∞–ª–æ–±—ã"))
async def show_reports(message: types.Message):
    if message.from_user.id not in MODERATORS:
        return
    from database import asyncpg, DATABASE_URL
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM reports ORDER BY id DESC LIMIT 10")
    await conn.close()
    if not rows:
        await message.answer("üì≠ –ñ–∞–ª–æ–± –Ω–µ—Ç.")
        return
    text = "\n".join(
        [f"{r['id']}. –û—Ç: {r['from_id']} ‚ûú –ù–∞: {r['to_id']} ({r['timestamp']:%d.%m %H:%M})"
         for r in rows]
    )
    await message.answer(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã:\n\n{text}")

# --- –ü–†–û–°–ú–û–¢–† –ë–ê–ù–û–í ---
@dp.message(Command("–±–∞–Ω—ã"))
async def show_bans(message: types.Message):
    if message.from_user.id not in MODERATORS:
        return
    from database import asyncpg, DATABASE_URL
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM bans ORDER BY until DESC")
    await conn.close()
    if not rows:
        await message.answer("‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return
    text = "\n".join([f"{r['tg_id']} ‚Äî –¥–æ {r['until']:%d.%m %H:%M}" for r in rows])
    await message.answer(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:\n\n{text}")

# --- –ë–ê–ù / –ê–ù–ë–ê–ù ---
@dp.message(lambda m: m.text.startswith("/–±–∞–Ω "))
async def ban_user_cmd(message: types.Message):
    if message.from_user.id not in MODERATORS:
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ ID: /–±–∞–Ω 123456789")
        return
    tg_id = int(parts[1])
    from database import ban_user
    await ban_user(tg_id)
    await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 24 —á–∞—Å–∞.")

@dp.message(lambda m: m.text.startswith("/–∞–Ω–±–∞–Ω "))
async def unban_user_cmd(message: types.Message):
    if message.from_user.id not in MODERATORS:
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ ID: /–∞–Ω–±–∞–Ω 123456789")
        return
    tg_id = int(parts[1])
    from database import unban_user
    await unban_user(tg_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# --- –ü–û–ò–°–ö ---
@dp.message(lambda m: m.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def search(message: types.Message):
    user_id = message.from_user.id
    if await check_ban(user_id):
        return
    
    if user_id in searching_queue:
        await message.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
        return
    
    await update_user(user_id, state='searching')
    searching_queue.append(user_id)
    
    await message.answer(
        "–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n\n–û–∂–∏–¥–∞–µ–º –µ—â—ë –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
        reply_markup=get_searching_menu()
    )

# --- –ö–ù–û–ü–ö–ò –ß–ê–¢–ê ---
@dp.message(lambda m: m.text in ["–°—Ç–æ–ø", "–°–ª–µ–¥—É—é—â–∏–π", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"])
async def handle_chat_buttons(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if message.text == "–°—Ç–æ–ø":
        if user and user['partner_id']:
            partner_id = user['partner_id']
            await update_user(partner_id, partner_id=None, state='menu')
            await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=get_main_menu())
        if user_id in searching_queue:
            searching_queue.remove(user_id)
        await update_user(user_id, partner_id=None, state='menu')
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        return

    if message.text == "–°–ª–µ–¥—É—é—â–∏–π":
        if user and user['partner_id']:
            partner_id = user['partner_id']
            await update_user(partner_id, partner_id=None, state='menu')
            await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏—â–µ—Ç –Ω–æ–≤–æ–≥–æ.", reply_markup=get_main_menu())
        if user_id in searching_queue:
            searching_queue.remove(user_id)
        await update_user(user_id, partner_id=None, state='searching')
        searching_queue.append(user_id)
        await message.answer("–ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=get_searching_menu())
        return

    if message.text == "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
        if not user or not user['partner_id']:
            await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return
        await message.answer(
            "–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã (1‚Äì100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True,
                input_field_placeholder="–ü—Ä–∏—á–∏–Ω–∞..."
            )
        )
        await update_user(user_id, state='reporting')
        return

# --- –û–¢–ú–ï–ù–ê (—É–º–Ω–∞—è) ---
@dp.message(lambda m: m.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_anything(message: types.Message):
    user = await get_user(message.from_user.id)
    
    if user and user['state'] == 'reporting':
        await update_user(message.from_user.id, state='chat')
        await message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_chat_menu())
        return
    
    if user and user['state'] == 'searching':
        if message.from_user.id in searching_queue:
            searching_queue.remove(message.from_user.id)
        await update_user(message.from_user.id, state='menu')
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return

# --- –ï–î–ò–ù–´–ô –•–ï–ù–î–õ–ï–†: –ñ–ê–õ–û–ë–ê + –ß–ê–¢ ---
@dp.message()
async def handle_messages(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        return

    # --- –ñ–ê–õ–û–ë–ê ---
    if user['state'] == 'reporting':
        reason = message.text.strip()
        if len(reason) > 100:
            await message.answer("–ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        partner_id = user['partner_id']
        await add_report(message.from_user.id, partner_id)
        
        # –ó–ê–í–ï–†–®–ê–ï–ú –ß–ê–¢ –£ –û–ë–û–ò–•
        await update_user(message.from_user.id, state='menu', partner_id=None)
        await update_user(partner_id, state='menu', partner_id=None)
        
        await message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        await bot.send_message(partner_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –∂–∞–ª–æ–±—ã.", reply_markup=get_main_menu())
        
        count = await get_reports_count(partner_id)
        if count >= 3:
            await ban_user(partner_id)
            await bot.send_message(partner_id, "–¢—ã –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –∂–∞–ª–æ–±—ã.", reply_markup=get_main_menu())
        
        await bot.send_message(
            MODERATOR_ID,
            f"–ñ–ê–õ–û–ë–ê + –ß–ê–¢ –ó–ê–í–ï–†–®–Å–ù\n"
            f"–û—Ç: {message.from_user.id}\n"
            f"–ù–∞: {partner_id}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–í—Å–µ–≥–æ –∂–∞–ª–æ–±: {count}"
        )
        return

    # --- –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ---
    if user['state'] == 'chat' and user['partner_id']:
        await bot.send_message(user['partner_id'], message.text)

# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup(app):
    await init_db()
    webhook_url = f"https://anonymous-chat-bot-7f1b.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    asyncio.create_task(start_search_loop())
    print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù! –°–û–û–ë–©–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢! –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢!")

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.router.add_get("/health", lambda r: web.Response(text="OK"))
    app.on_startup.append(on_startup)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    main()
