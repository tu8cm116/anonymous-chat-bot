import asyncio
import logging
import hashlib
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.enums import ContentType
from aiohttp import web
import os
from dotenv import load_dotenv
from database import *

load_dotenv()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_ID = int(os.getenv("MODERATOR_ID", "0"))
MOD_SECRET = os.getenv("MOD_SECRET", "")
HASH_SALT = os.getenv("HASH_SALT", "default_salt_change_me")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ID ---
def hash_id(user_id):
    return hashlib.sha256(f"{user_id}{HASH_SALT}".encode()).hexdigest()[:16]

# --- –û–ß–ï–†–ï–î–¨ –°–û –°–õ–£–ß–ê–ô–ù–´–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï–ú ---
class RandomMatchQueue:
    def __init__(self):
        self._users = set()
        self._lock = asyncio.Lock()
    
    async def add(self, user_id):
        async with self._lock:
            if user_id not in self._users:
                self._users.add(user_id)
                logging.info(f"User {user_id} added to queue. Queue size: {len(self._users)}")
                return True
        return False
    
    async def remove(self, user_id):
        async with self._lock:
            if user_id in self._users:
                self._users.remove(user_id)
                logging.info(f"User {user_id} removed from queue. Queue size: {len(self._users)}")
                return True
        return False
    
    async def get_random_pair(self):
        async with self._lock:
            if len(self._users) < 2:
                return None, None
            
            users_list = list(self._users)
            user1, user2 = random.sample(users_list, 2)
            
            self._users.remove(user1)
            self._users.remove(user2)
            
            logging.info(f"Random pair created: {user1} and {user2}. Queue size: {len(self._users)}")
            return user1, user2
    
    def __len__(self):
        return len(self._users)
    
    async def get_queue_info(self):
        async with self._lock:
            return list(self._users)

searching_queue = RandomMatchQueue()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="–ú–æ–π ID")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_searching_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_chat_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–æ–ø"), KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π")],
            [KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    )

def get_mod_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="mod_chats")],
        [InlineKeyboardButton(text="–ñ–∞–ª–æ–±—ã", callback_data="mod_reports")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats")],
        [InlineKeyboardButton(text="–ë–∞–Ω –ø–æ ID", callback_data="mod_ban")],
        [InlineKeyboardButton(text="–û—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞", callback_data="mod_queue")]
    ])

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ ---
async def check_ban(user_id):
    # –ú–û–î–ï–†–ê–¢–û–† –ù–ò–ö–û–ì–î–ê –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ó–ê–ë–ê–ù–ï–ù
    if user_id == MODERATOR_ID:
        return False
        
    if await is_banned(user_id):
        await bot.send_message(user_id, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return True
    return False

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def safe_send_message(chat_id, text, reply_markup=None):
    try:
        await bot.send_message(chat_id, text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logging.error(f"Failed to send message to {chat_id}: {e}")
        return False

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞ ---
async def safe_forward_media(chat_id, message):
    try:
        # –¢–µ–∫—Å—Ç
        if message.text:
            await bot.send_message(chat_id, message.text)
        
        # –§–æ—Ç–æ
        elif message.photo:
            await bot.send_photo(chat_id, message.photo[-1].file_id, caption=message.caption)
        
        # –í–∏–¥–µ–æ
        elif message.video:
            await bot.send_video(chat_id, message.video.file_id, caption=message.caption)
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.voice:
            await bot.send_voice(chat_id, message.voice.file_id)
        
        # –ê—É–¥–∏–æ (–º—É–∑—ã–∫–∞)
        elif message.audio:
            await bot.send_audio(chat_id, message.audio.file_id, caption=message.caption)
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document:
            await bot.send_document(chat_id, message.document.file_id, caption=message.caption)
        
        # –°—Ç–∏–∫–µ—Ä—ã
        elif message.sticker:
            await bot.send_sticker(chat_id, message.sticker.file_id)
        
        # –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–æ—á–∫–∏)
        elif message.video_note:
            await bot.send_video_note(chat_id, message.video_note.file_id)
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏ (GIF)
        elif message.animation:
            await bot.send_animation(chat_id, message.animation.file_id, caption=message.caption)
        
        # –õ–æ–∫–∞—Ü–∏—è
        elif message.location:
            await bot.send_location(chat_id, message.location.latitude, message.location.longitude)
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        elif message.contact:
            await bot.send_contact(chat_id, message.contact.phone_number, message.contact.first_name)
        
        return True
    except Exception as e:
        logging.error(f"Failed to forward media to {chat_id}: {e}")
        return False

# --- –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ ---
async def start_search_loop():
    logging.info("Random search loop started")
    try:
        while True:
            user1, user2 = await searching_queue.get_random_pair()
            if user1 and user2:
                try:
                    u1_data = await get_user(user1)
                    u2_data = await get_user(user2)
                    
                    if not u1_data or not u2_data:
                        continue
                    
                    if u1_data['state'] == 'searching' and u2_data['state'] == 'searching':
                        await update_user(user1, partner_id=user2, state='chat')
                        await update_user(user2, partner_id=user1, state='chat')
                        
                        await safe_send_message(user1, 
                            "üéâ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n\n"
                            "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
                            "‚Ä¢ –¢–µ–∫—Å—Ç\n‚Ä¢ –§–æ—Ç–æ\n‚Ä¢ –í–∏–¥–µ–æ\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ\n‚Ä¢ –ú—É–∑—ã–∫—É\n‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã\n‚Ä¢ –§–∞–π–ª—ã\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
                            reply_markup=get_chat_menu()
                        )
                        await safe_send_message(user2, 
                            "üéâ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n\n"
                            "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
                            "‚Ä¢ –¢–µ–∫—Å—Ç\n‚Ä¢ –§–æ—Ç–æ\n‚Ä¢ –í–∏–¥–µ–æ\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ\n‚Ä¢ –ú—É–∑—ã–∫—É\n‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã\n‚Ä¢ –§–∞–π–ª—ã\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
                            reply_markup=get_chat_menu()
                        )
                        
                    else:
                        if u1_data['state'] == 'searching':
                            await searching_queue.add(user1)
                        if u2_data['state'] == 'searching':
                            await searching_queue.add(user2)
                            
                except Exception as e:
                    logging.error(f"Error pairing users: {e}")
                    await searching_queue.add(user1)
                    await searching_queue.add(user2)
            
            await asyncio.sleep(0.5)
            
    except asyncio.CancelledError:
        logging.info("Search loop stopped")
    except Exception as e:
        logging.error(f"Search loop crashed: {e}")

# ================================
#           –ö–û–ú–ê–ù–î–´
# ================================

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    
    # –û–°–û–ë–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –ú–û–î–ï–†–ê–¢–û–†–ê
    if user_id == MODERATOR_ID:
        await update_user(user_id, state='menu')
        await message.answer(
            "üëë –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¢–û–†–ê\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /mod –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu()
        )
        return
        
    if await check_ban(user_id):
        return
    
    await update_user(user_id, state='menu')
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n‚Ä¢ –§–æ—Ç–æ\n‚Ä¢ –í–∏–¥–µ–æ\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ\n‚Ä¢ –ú—É–∑—ã–∫—É\n‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã\n‚Ä¢ –§–∞–π–ª—ã\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
        reply_markup=get_main_menu()
    )

@dp.message(Command("mod"))
async def mod_panel(message: types.Message):
    user_id = message.from_user.id
    
    if user_id != MODERATOR_ID:
        return
    
    args = message.text.split()
    if len(args) < 2 or args[1] != MOD_SECRET:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await update_user(user_id, state='mod_menu')
    await message.answer(
        f"üõ† –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨\n"
        f"üëë –í–∞—à ID: {MODERATOR_ID}",
        reply_markup=get_mod_menu()
    )

# --- –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û ID ---
@dp.message(Command("myrealid"))
async def my_real_id(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"üÜî –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID: `{user_id}`", parse_mode="Markdown")

@dp.message(lambda m: m.text == "–ú–æ–π ID")
async def my_id(message: types.Message):
    user_id = message.from_user.id
    
    # –ú–û–î–ï–†–ê–¢–û–† –í–ò–î–ò–¢ –†–ï–ê–õ–¨–ù–´–ô ID
    if user_id == MODERATOR_ID:
        hashed_id = hash_id(user_id)
        await message.answer(
            f"üëë –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID: `{user_id}`\n"
            f"üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: `{hashed_id}`", 
            parse_mode="Markdown"
        )
    else:
        # –û–ë–´–ß–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í–ò–î–Ø–¢ –¢–û–õ–¨–ö–û –•–ï–®–ò–†–û–í–ê–ù–ù–´–ô
        hashed_id = hash_id(user_id)
        await message.answer(f"üîê –¢–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{hashed_id}`", parse_mode="Markdown")

@dp.message(lambda m: m.text == "–ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: types.Message):
    await message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n\n"
        "1. üö´ –ó–∞–ø—Ä–µ—â—ë–Ω –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–π —è–∑—ã–∫\n"
        "2. üö´ –ó–∞–ø—Ä–µ—â—ë–Ω —Å–ø–∞–º –∏ —Ñ–ª—É–¥\n"
        "3. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞\n"
        "4. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n"
        "5. ‚úÖ –£–≤–∞–∂–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
        "üí¨ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –º—É–∑—ã–∫—É, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–∞–π–ª—ã",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )

@dp.message(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_id = message.from_user.id
    await update_user(user_id, state='menu')
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.message(lambda m: m.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def search(message: types.Message):
    user_id = message.from_user.id
    
    if await check_ban(user_id):
        return
    
    user_data = await get_user(user_id)
    if user_data and user_data['state'] == 'chat':
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    await update_user(user_id, state='searching')
    added = await searching_queue.add(user_id)
    
    if added:
        # –£–ë–†–ê–ù–û: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
        await message.answer(
            "üîç –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
            reply_markup=get_searching_menu()
        )
    else:
        await message.answer("‚è≥ –¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞!")

@dp.message(lambda m: m.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_anything(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        return
    
    if user['state'] == 'reporting':
        await update_user(user_id, state='chat')
        await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_chat_menu())
        return
        
    if user['state'] == 'searching':
        await searching_queue.remove(user_id)
        await update_user(user_id, state='menu')
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return
    
    await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=get_main_menu())

# ================================
#        –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–û–ú
# ================================

@dp.message(lambda m: m.text in ["–°—Ç–æ–ø", "–°–ª–µ–¥—É—é—â–∏–π", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"])
async def handle_chat_buttons(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user or user['state'] != 'chat':
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    if message.text == "–°—Ç–æ–ø":
        partner_id = user['partner_id']
        
        await update_user(user_id, partner_id=None, state='menu')
        if partner_id:
            await update_user(partner_id, partner_id=None, state='menu')
            await safe_send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=get_main_menu())
        
        await searching_queue.remove(user_id)
        await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        return

    if message.text == "–°–ª–µ–¥—É—é—â–∏–π":
        partner_id = user['partner_id']
        
        if partner_id:
            await update_user(partner_id, partner_id=None, state='menu')
            await safe_send_message(partner_id, "üîç –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏—â–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", reply_markup=get_main_menu())
        
        await update_user(user_id, partner_id=None, state='searching')
        await searching_queue.add(user_id)
        
        # –£–ë–†–ê–ù–û: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
        await message.answer("üîÑ –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=get_searching_menu())
        return

    if message.text == "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
        if not user['partner_id']:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã.")
            return
            
        await message.answer(
            "üìù –û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        await update_user(user_id, state='reporting')
        return

# ================================
#        –°–ò–°–¢–ï–ú–ê –ñ–ê–õ–û–ë
# ================================

@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await update_user(user_id, state='menu')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã
    if user['state'] == 'reporting':
        reason = message.text.strip()
        
        partner_id = user['partner_id']
        if not partner_id:
            await message.answer("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await update_user(user_id, state='menu')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É
        await add_report(user_id, partner_id, reason)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö
        await update_user(user_id, state='menu', partner_id=None)
        await update_user(partner_id, state='menu', partner_id=None)
        
        await message.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        await safe_send_message(partner_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.", reply_markup=get_main_menu())
        
        # –ù–ï –ë–ê–ù–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò - –¢–û–õ–¨–ö–û –£–í–ï–î–û–ú–õ–Ø–ï–ú –ú–û–î–ï–†–ê–¢–û–†–ê
        reports_count = await get_reports_count(partner_id)
        
        if MODERATOR_ID:
            await safe_send_message(
                MODERATOR_ID,
                f"üö® –ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê\n\n"
                f"–û—Ç: {hash_id(user_id)}\n"
                f"–ù–∞: {hash_id(partner_id)}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–í—Å–µ–≥–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reports_count}"
            )
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (–í–°–ï –¢–ò–ü–´ –ú–ï–î–ò–ê)
    if user['state'] == 'chat' and user['partner_id']:
        try:
            await safe_forward_media(user['partner_id'], message)
        except Exception as e:
            logging.error(f"Error forwarding message: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ================================
#        –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨
# ================================

@dp.callback_query(lambda c: c.data.startswith("mod_"))
async def mod_callbacks(callback: types.CallbackQuery):
    if callback.from_user.id != MODERATOR_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    data = callback.data

    if data == "mod_chats":
        users = await get_all_users()
        chats = []
        seen = set()
        
        for user in users:
            if (user['partner_id'] and user['partner_id'] not in seen 
                and user['state'] == 'chat'):
                p1, p2 = user['tg_id'], user['partner_id']
                seen.add(p1)
                seen.add(p2)
                chats.append((p1, p2))
        
        if not chats:
            await callback.message.edit_text("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=get_mod_menu())
            return
        
        text = "üìä –ê–ö–¢–ò–í–ù–´–ï –ß–ê–¢–´:\n\n"
        kb = []
        for i, (u1, u2) in enumerate(chats, 1):
            h1, h2 = hash_id(u1), hash_id(u2)
            text += f"–ß–∞—Ç #{i}: {h1} ‚Üî {h2}\n"
            kb.append([InlineKeyboardButton(text=f"–ß–∞—Ç #{i}", callback_data=f"view_chat_{u1}_{u2}")])
        
        kb.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")])
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

    elif data.startswith("view_chat_"):
        _, _, u1, u2 = data.split("_")
        u1, u2 = int(u1), int(u2)
        await callback.message.edit_text(
            f"üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ {hash_id(u1)} ‚Üî {hash_id(u2)}\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_chats")]
            ])
        )

    elif data == "mod_reports":
        reports = await get_all_reports()
        if not reports:
            await callback.message.edit_text("üìù –ñ–∞–ª–æ–± –Ω–µ—Ç.", reply_markup=get_mod_menu())
            return
        
        text = "üìù –ü–û–°–õ–ï–î–ù–ò–ï –ñ–ê–õ–û–ë–´:\n\n"
        for r in reports[:10]:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏
            reporter_id = r.get('reporter_id') or r.get('from_id')
            reported_id = r.get('reported_id') or r.get('to_id')
            text += f"üë§ {hash_id(reporter_id)} ‚Üí {hash_id(reported_id)}\n"
            text += f"üìã –ü—Ä–∏—á–∏–Ω–∞: {r['reason']}\n"
            text += f"üïí {r['timestamp'].strftime('%d.%m %H:%M')}\n\n"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_stats":
        total_users, active_chats, total_reports = await get_stats()
        in_queue = len(searching_queue)
        reports_today = await get_reports_today()
        
        text = (
            f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
            f"üîç –í –ø–æ–∏—Å–∫–µ: {in_queue}\n"
            f"üìù –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {total_reports}\n"
            f"üìÖ –ñ–∞–ª–æ–± —Å–µ–≥–æ–¥–Ω—è: {reports_today}\n"
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_ban":
        await callback.message.edit_text(
            "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="mod_back")]
            ])
        )
        await update_user(callback.from_user.id, state='mod_banning')

    elif data == "mod_queue":
        queue_users = await searching_queue.get_queue_info()
        if not queue_users:
            await callback.message.edit_text("üë• –û—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=get_mod_menu())
            return
        
        text = f"üë• –û–ß–ï–†–ï–î–¨ –ü–û–ò–°–ö–ê ({len(queue_users)}):\n\n"
        for i, user_id in enumerate(queue_users, 1):
            text += f"{i}. {hash_id(user_id)}\n"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_back":
        await callback.message.edit_text("üõ† –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨", reply_markup=get_mod_menu())

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
@dp.message(lambda m: m.from_user.id == MODERATOR_ID)
async def mod_ban_execute(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or user['state'] != 'mod_banning':
        return
        
    try:
        target_id = int(message.text.strip())
        
        # –ù–ï–õ–¨–ó–Ø –ó–ê–ë–ê–ù–ò–¢–¨ –°–ê–ú–û–ì–û –°–ï–ë–Ø
        if target_id == MODERATOR_ID:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è!", reply_markup=get_mod_menu())
            await update_user(message.from_user.id, state='mod_menu')
            return
            
        await ban_user(target_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hash_id(target_id)} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 24 —á–∞—Å–∞.", 
            reply_markup=get_mod_menu()
        )
        await update_user(message.from_user.id, state='mod_menu')
        
        await safe_send_message(target_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ 24 —á–∞—Å–∞.")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.", reply_markup=get_mod_menu())
    except Exception as e:
        logging.error(f"Ban error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_mod_menu())

# ================================
#           –ó–ê–ü–£–°–ö
# ================================

async def on_startup(app):
    logging.info("Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await unban_user(MODERATOR_ID)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(start_search_loop())
    
    logging.info("Bot started successfully!")

async def on_shutdown(app):
    logging.info("Shutting down bot...")
    await bot.session.close()

def main():
    app = web.Application()
    
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path="/webhook")
    
    setup_application(app, dp, bot=bot)
    
    app.router.add_get("/health", lambda r: web.Response(text="OK"))
    
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
