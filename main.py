import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –¢–≤–æ–π ID (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä) ‚Äî –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô TELEGRAM ID!
MODERATOR_ID = 684261784  # –ü–æ–ª—É—á–∏ —Å–≤–æ–π ID: –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É /start, –ø–æ—Ç–æ–º –≤ –∫–æ–¥–µ /my_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search")],
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="my_id")]
    ])
    return kb

def get_searching_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")]
    ])
    return kb

def get_chat_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –°—Ç–æ–ø", callback_data="stop")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
    ])
    return kb

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏) ---
users = {}  # tg_id: {state, partner, last_message_time}

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {"state": "menu", "last_message_time": asyncio.get_event_loop().time()}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –Ω–∞ –¥–≤–æ–∏—Ö ü§´\n\n"
        "–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–æ:\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∏–º—ë–Ω, —Ñ–æ—Ç–æ, —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ —Ç—ã\n"
        "‚Ä¢ –ù–∞—Ä—É—à–∏—Ç–µ–ª–µ–π ‚Äî –±–∞–Ω\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞: –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å, –Ω–µ —Å–ø–∞–º—å, —É–≤–∞–∂–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "rules")
async def rules(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –ù–µ –º–∞—Ç–µ—Ä–∏—Å—å –∏ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π\n"
        "2. –ù–µ —Å–ø–∞–º—å –∏ –Ω–µ —Ñ–ª—É–¥–∏\n"
        "3. –ù–µ —Ä–µ–∫–ª–∞–º–∏—Ä—É–π\n"
        "4. –£–≤–∞–∂–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
        "–ù–∞—Ä—É—à–µ–Ω–∏–µ = –±–∞–Ω. –ñ–∞–ª–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(F.data == "my_id")
async def my_id(callback: types.CallbackQuery):
    await callback.answer(f"üÜî –¢–≤–æ–π ID: {callback.from_user.id}\n\n–ï—Å–ª–∏ –∑–∞–±–∞–Ω—è—Ç ‚Äî –Ω–∞–ø–∏—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å —ç—Ç–∏–º ID.", show_alert=True)

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in users:
        users[user_id]["state"] = "menu"
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.callback_query(F.data == "search")
async def search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    users[user_id] = {"state": "searching", "last_message_time": asyncio.get_event_loop().time()}
    
    # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å)
    await callback.message.edit_text(
        "üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... (1‚Äì2 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø–æ–∏—Å–∫–µ)\n\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=get_searching_menu()
    )
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    await asyncio.sleep(3)
    
    # –ó–∞–≥–ª—É—à–∫–∞: "–Ω–∞—à–ª–∏" –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–ø–æ–∑–∂–µ —Ä–µ–∞–ª—å–Ω—ã–π)
    partner_id = user_id + 1  # –§–µ–π–∫
    users[user_id]["partner"] = partner_id
    if partner_id not in users:
        users[partner_id] = {"partner": user_id, "state": "chat"}
    
    await callback.message.edit_text(
        "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.\n\n"
        "–í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è. –°–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=get_chat_menu()
    )
    users[user_id]["state"] = "chat"

@dp.callback_query(F.data == "cancel_search")
async def cancel_search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in users:
        users[user_id]["state"] = "menu"
    await callback.message.edit_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())

@dp.callback_query(F.data == "stop")
async def stop(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in users and "partner" in users[user_id]:
        partner_id = users[user_id]["partner"]
        if partner_id in users:
            users[partner_id]["partner"] = None
            users[partner_id]["state"] = "menu"
        users[user_id]["partner"] = None
        users[user_id]["state"] = "menu"
    await callback.message.edit_text(
        "‚èπÔ∏è –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!\n\n"
        "–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â—ë", callback_data="search")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(F.data == "next")
async def next_chat(callback: types.CallbackQuery):
    await stop(callback)  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
    await search(callback)  # –ò—â–µ–º –Ω–æ–≤—ã–π

@dp.callback_query(F.data == "report")
async def report(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in users and "partner" in users[user_id]:
        partner_id = users[user_id]["partner"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏, –ø–æ–∑–∂–µ –≤ –ë–î)
        if "reports" not in globals():
            globals()["reports"] = []
        globals()["reports"].append({"from": user_id, "to": partner_id, "time": asyncio.get_event_loop().time()})
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Ç—ã)
        if MODERATOR_ID:
            await bot.send_message(MODERATOR_ID, f"‚ö†Ô∏è –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞: –æ—Ç {user_id} –Ω–∞ {partner_id}")
    
    await callback.answer("‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (–∞–Ω–æ–Ω–∏–º–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users or users[user_id]["state"] != "chat":
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞! –ù–∞–∂–º–∏ /start")
        return
    
    partner_id = users[user_id]["partner"]
    if not partner_id:
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'.")
        return
    
    # –ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    await bot.send_message(partner_id, f"üí¨ {message.text}")
    users[user_id]["last_message_time"] = asyncio.get_event_loop().time()

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (health check) ---
async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

async def on_shutdown(dp):
    await dp.storage.close()

def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    # Health check endpoint
    async def health_check(request):
        return web.Response(text="OK")
    
    app.router.add_get("/health", health_check)
    
    # –ó–∞–ø—É—Å–∫
    port = int(os.getenv("PORT", 10000))
    app.on_startup.append(on_startup)
    app.on_shutdown.append(lambda _: on_shutdown(dp))
    
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
