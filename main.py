import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from dotenv import load_dotenv
from database import *  # –ò–º–ø–æ—Ä—Ç –ë–î

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_ID = 684261784  # –¢–≤–æ–π ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

def get_chat_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–æ–ø", callback_data="stop")],
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π", callback_data="next")],
        [InlineKeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
    ])

def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search")],
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="my_id")]
    ])

async def check_ban(user_id):
    if await is_banned(user_id):
        return True
    return False

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if await check_ban(user_id):
        await message.answer("üö´ –¢—ã –∑–∞–±–∞–Ω–µ–Ω. –û–±–∂–∞–ª—É–π —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å ID.")
        return
    await update_user(user_id, state='menu')
    await message.answer(
        "ü§´ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –Ω–∞ –¥–≤–æ–∏—Ö!\n\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏\n"
        "‚Ä¢ –ë–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )

@dp.callback_query(lambda c: c.data == "my_id")
async def my_id(callback: types.CallbackQuery):
    await callback.answer(f"üÜî –¢–≤–æ–π ID: {callback.from_user.id}\n\n–î–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –±–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∂–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

@dp.callback_query(lambda c: c.data == "rules")
async def rules(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –ù–µ—Ç –º–∞—Ç–∞/–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π\n"
        "2. –ù–µ—Ç —Å–ø–∞–º–∞\n"
        "3. –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã\n"
        "4. –£–≤–∞–∂–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
        "–ñ–∞–ª–æ–±—ã ‚Üí –±–∞–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await update_user(callback.from_user.id, state='menu')
    await callback.message.edit_text("üè† –ú–µ–Ω—é:", reply_markup=get_main_menu())

@dp.callback_query(lambda c: c.data == "search")
async def search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_ban(user_id):
        await callback.answer("üö´ –ó–∞–±–∞–Ω–µ–Ω.")
        return
    await update_user(user_id, state='searching')
    await callback.message.edit_text(
        "üîç –ò—â–µ–º... (–∂–¥—ë–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")]
        ])
    )
    
    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞
    asyncio.create_task(find_and_pair(user_id, callback.message.chat.id))

async def find_and_pair(user_id, chat_id):
    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞
    partner_id = await find_partner()
    if partner_id and partner_id != user_id:
        await update_user(user_id, partner_id=partner_id, state='chat')
        await update_user(partner_id, partner_id=user_id, state='chat')
        await bot.send_message(chat_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_chat_menu())
        await bot.send_message(partner_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_chat_menu())
    else:
        await update_user(user_id, state='menu')
        await bot.send_message(chat_id, "üë• –ù–∏–∫–æ–≥–æ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())

@dp.callback_query(lambda c: c.data == "cancel_search")
async def cancel_search(callback: types.CallbackQuery):
    await update_user(callback.from_user.id, state='menu')
    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())

@dp.callback_query(lambda c: c.data == "stop")
async def stop(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner_id = (await get_user(user_id))['partner_id']
    if partner_id:
        await update_user(partner_id, partner_id=None, state='menu')
    await update_user(user_id, partner_id=None, state='menu')
    await callback.message.edit_text("‚èπÔ∏è –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu())

@dp.callback_query(lambda c: c.data == "next")
async def next_chat(callback: types.CallbackQuery):
    await stop(callback)
    await search(callback)

@dp.callback_query(lambda c: c.data == "report")
async def report(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    if user and user['partner_id']:
        await add_report(user_id, user['partner_id'])
        count = await get_reports_count(user['partner_id'])
        if count >= 3:
            await ban_user(user['partner_id'])
            await bot.send_message(user['partner_id'], "üö´ –ë–∞–Ω –∑–∞ –∂–∞–ª–æ–±—ã.")
        await callback.answer("‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!", show_alert=True)
        # –£–≤–µ–¥–æ–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(MODERATOR_ID, f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞: {user_id} ‚Üí {user['partner_id']}")

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if user and user['state'] == 'chat' and user['partner_id']:
        await bot.send_message(user['partner_id'], f"üí¨ {message.text}")
        await update_user(user_id, last_active=datetime.now())

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è
@dp.message(Command("mod"))
async def mod_panel(message: types.Message):
    if message.from_user.id != MODERATOR_ID:
        return
    stats = await get_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[0]}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats[1]}\n"
        f"–ñ–∞–ª–æ–±: {stats[2]}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/ban ID ‚Äî –±–∞–Ω\n"
        f"/unban ID ‚Äî —Ä–∞–∑–±–∞–Ω\n"
        f"/user ID ‚Äî –ø—Ä–æ—Ñ–∏–ª—å"
    )

@dp.message(Command("ban"))
async def ban_cmd(message: types.Message):
    if message.from_user.id != MODERATOR_ID:
        return
    try:
        tg_id = int(message.text.split()[1])
        await ban_user(tg_id)
        await message.answer(f"üö´ {tg_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 24—á.")
    except:
        await message.answer("‚ùå /ban ID")

@dp.message(Command("unban"))
async def unban_cmd(message: types.Message):
    if message.from_user.id != MODERATOR_ID:
        return
    try:
        tg_id = int(message.text.split()[1])
        await unban_user(tg_id)
        await message.answer(f"‚úÖ {tg_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except:
        await message.answer("‚ùå /unban ID")

@dp.message(Command("user"))
async def user_info(message: types.Message):
    if message.from_user.id != MODERATOR_ID:
        return
    try:
        tg_id = int(message.text.split()[1])
        user = await get_user(tg_id)
        reports = await get_reports_count(tg_id)
        banned = "–î–∞" if await is_banned(tg_id) else "–ù–µ—Ç"
        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id}:\n"
            f"–°—Ç–∞—Ç—É—Å: {user['state'] if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"–ü–∞—Ä—Ç–Ω—ë—Ä: {user['partner_id'] if user else '‚Äî'}\n"
            f"–ñ–∞–ª–æ–±: {reports}\n"
            f"–ó–∞–±–∞–Ω–µ–Ω: {banned}"
        )
    except:
        await message.answer("‚ùå /user ID")

# –ó–∞–ø—É—Å–∫
async def on_startup(app):
    await init_db()
    webhook_url = f"https://anonymous-chat-bot-7f1b.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ë–î!")

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.router.add_get("/health", lambda r: web.Response(text="OK"))
    app.on_startup.append(on_startup)
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
