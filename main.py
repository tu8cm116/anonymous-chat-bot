import asyncio
import logging
import hashlib
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from dotenv import load_dotenv
from database import *

load_dotenv()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_ID = int(os.getenv("MODERATOR_ID", "0"))
MOD_SECRET = os.getenv("MOD_SECRET", "")
HASH_SALT = os.getenv("HASH_SALT", "default_salt_change_me")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ID ---
def hash_id(user_id):
    return hashlib.sha256(f"{user_id}{HASH_SALT}".encode()).hexdigest()[:16]

# --- –û–ß–ï–†–ï–î–¨ –°–û –°–õ–£–ß–ê–ô–ù–´–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï–ú ---
class RandomMatchQueue:
    def __init__(self):
        self._users = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self._lock = asyncio.Lock()
    
    async def add(self, user_id):
        async with self._lock:
            if user_id not in self._users:
                self._users.add(user_id)
                logging.info(f"User {user_id} added to queue. Queue size: {len(self._users)}")
                return True
        return False
    
    async def remove(self, user_id):
        async with self._lock:
            if user_id in self._users:
                self._users.remove(user_id)
                logging.info(f"User {user_id} removed from queue. Queue size: {len(self._users)}")
                return True
        return False
    
    async def get_random_pair(self):
        async with self._lock:
            if len(self._users) < 2:
                return None, None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
            users_list = list(self._users)
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user1, user2 = random.sample(users_list, 2)
            
            # –£–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            self._users.remove(user1)
            self._users.remove(user2)
            
            logging.info(f"Random pair created: {user1} and {user2}. Queue size: {len(self._users)}")
            return user1, user2
    
    def __len__(self):
        return len(self._users)
    
    async def get_queue_info(self):
        async with self._lock:
            return list(self._users)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞

searching_queue = RandomMatchQueue()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="–ú–æ–π ID")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_searching_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_chat_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–æ–ø"), KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π")],
            [KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    )

def get_mod_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="mod_chats")],
        [InlineKeyboardButton(text="–ñ–∞–ª–æ–±—ã", callback_data="mod_reports")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats")],
        [InlineKeyboardButton(text="–ë–∞–Ω –ø–æ ID", callback_data="mod_ban")],
        [InlineKeyboardButton(text="–û—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞", callback_data="mod_queue")]
    ])

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ ---
async def check_ban(user_id):
    if await is_banned(user_id):
        await bot.send_message(user_id, "‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return True
    return False

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def safe_send_message(chat_id, text, reply_markup=None):
    try:
        await bot.send_message(chat_id, text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logging.error(f"Failed to send message to {chat_id}: {e}")
        return False

# --- –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –°–û –°–õ–£–ß–ê–ô–ù–´–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï–ú ---
async def start_search_loop():
    logging.info("Random search loop started")
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É
            user1, user2 = await searching_queue.get_random_pair()
            if user1 and user2:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω—ã –∏ –≤ –ø–æ–∏—Å–∫–µ
                    u1_data = await get_user(user1)
                    u2_data = await get_user(user2)
                    
                    if not u1_data or not u2_data:
                        continue
                    
                    # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if u1_data['state'] == 'searching' and u2_data['state'] == 'searching':
                        # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        await update_user(user1, partner_id=user2, state='chat')
                        await update_user(user2, partner_id=user1, state='chat')
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
                        await safe_send_message(user1, 
                            "üéâ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n\n"
                            "üí° –°–æ–≤–µ—Ç: –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å!",
                            reply_markup=get_chat_menu()
                        )
                        await safe_send_message(user2, 
                            "üéâ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n\n"
                            "üí° –°–æ–≤–µ—Ç: –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å!",
                            reply_markup=get_chat_menu()
                        )
                        
                        logging.info(f"Randomly paired users: {user1} and {user2}")
                    else:
                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–µ—Ö, –∫—Ç–æ –µ—â—ë –≤ –ø–æ–∏—Å–∫–µ
                        if u1_data['state'] == 'searching':
                            await searching_queue.add(user1)
                        if u2_data['state'] == 'searching':
                            await searching_queue.add(user2)
                        logging.warning(f"User state changed during pairing: {user1}={u1_data['state']}, {user2}={u2_data['state']}")
                            
                except Exception as e:
                    logging.error(f"Error pairing users {user1} and {user2}: {e}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await searching_queue.add(user1)
                    await searching_queue.add(user2)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –º–µ–Ω—å—à–µ –∂–¥—ë–º –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            delay = 0.5 if len(searching_queue) >= 2 else 1.0
            await asyncio.sleep(delay)
            
    except asyncio.CancelledError:
        logging.info("Search loop stopped")
    except Exception as e:
        logging.error(f"Search loop crashed: {e}")

# --- –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ---
async def cleanup_queue_loop():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
            queue_users = await searching_queue.get_queue_info()
            cleaned_count = 0
            
            for user_id in queue_users:
                user_data = await get_user(user_id)
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ searching, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                if not user_data or user_data['state'] != 'searching':
                    await searching_queue.remove(user_id)
                    cleaned_count += 1
                    logging.info(f"Cleaned inactive user {user_id} from queue")
            
            if cleaned_count > 0:
                logging.info(f"Cleaned {cleaned_count} inactive users from queue")
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logging.error(f"Queue cleanup error: {e}")
            await asyncio.sleep(60)

# ================================
#           –ö–û–ú–ê–ù–î–´
# ================================

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if await check_ban(user_id):
        return
    
    await update_user(user_id, state='menu')
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏\n" 
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑ —Ç—ã –±—É–¥–µ—à—å —Å–æ–µ–¥–∏–Ω—ë–Ω —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!",
        reply_markup=get_main_menu()
    )

@dp.message(Command("mod"))
async def mod_panel(message: types.Message):
    user_id = message.from_user.id
    
    if user_id != MODERATOR_ID:
        logging.warning(f"Unauthorized mod access attempt from {user_id}")
        return
    
    args = message.text.split()
    if len(args) < 2 or args[1] != MOD_SECRET:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await update_user(user_id, state='mod_menu')
    await message.answer("üõ† –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨", reply_markup=get_mod_menu())
    logging.info(f"Moderator {user_id} accessed mod panel")

# ================================
#        –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´
# ================================

@dp.message(lambda m: m.text == "–ú–æ–π ID")
async def my_id(message: types.Message):
    hashed_id = hash_id(message.from_user.id)
    await message.answer(f"üîê –¢–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{hashed_id}`", parse_mode="Markdown")

@dp.message(lambda m: m.text == "–ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: types.Message):
    await message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n\n"
        "1. üö´ –ó–∞–ø—Ä–µ—â—ë–Ω –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–π —è–∑—ã–∫\n"
        "2. üö´ –ó–∞–ø—Ä–µ—â—ë–Ω —Å–ø–∞–º –∏ —Ñ–ª—É–¥\n"
        "3. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞\n"
        "4. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n"
        "5. ‚úÖ –£–≤–∞–∂–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
        "‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª = –±–∞–Ω\n\n"
        "üîÑ –ö–∞–∂–¥—ã–π —Ä–∞–∑ —Ç—ã –±—É–¥–µ—à—å —Å–æ–µ–¥–∏–Ω—ë–Ω —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )

@dp.message(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_id = message.from_user.id
    await update_user(user_id, state='menu')
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.message(lambda m: m.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def search(message: types.Message):
    user_id = message.from_user.id
    
    if await check_ban(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —á–∞—Ç–µ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = await get_user(user_id)
    if user_data and user_data['state'] == 'chat':
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    await update_user(user_id, state='searching')
    added = await searching_queue.add(user_id)
    
    if added:
        queue_size = len(searching_queue)
        if queue_size >= 2:
            await message.answer(
                f"üîç –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n"
                f"üë• –í –æ—á–µ—Ä–µ–¥–∏: {queue_size} —á–µ–ª–æ–≤–µ–∫\n\n"
                f"‚ö° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∫—É–Ω–¥—ã!",
                reply_markup=get_searching_menu()
            )
        else:
            await message.answer(
                f"üîç –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n"
                f"üë• –í –æ—á–µ—Ä–µ–¥–∏: {queue_size} —á–µ–ª–æ–≤–µ–∫\n\n"
                f"‚è≥ –ñ–¥—ë–º –µ—â—ë —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...",
                reply_markup=get_searching_menu()
            )
    else:
        await message.answer("‚è≥ –¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞! –ñ–¥—ë–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

@dp.message(lambda m: m.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_anything(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        return
    
    if user['state'] == 'reporting':
        await update_user(user_id, state='chat')
        await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_chat_menu())
        return
        
    if user['state'] == 'searching':
        await searching_queue.remove(user_id)
        await update_user(user_id, state='menu')
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return
    
    await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=get_main_menu())

# ================================
#        –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–û–ú
# ================================

@dp.message(lambda m: m.text in ["–°—Ç–æ–ø", "–°–ª–µ–¥—É—é—â–∏–π", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"])
async def handle_chat_buttons(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user or user['state'] != 'chat':
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    if message.text == "–°—Ç–æ–ø":
        partner_id = user['partner_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await update_user(user_id, partner_id=None, state='menu')
        if partner_id:
            await update_user(partner_id, partner_id=None, state='menu')
            await safe_send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=get_main_menu())
        
        await searching_queue.remove(user_id)
        await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        return

    if message.text == "–°–ª–µ–¥—É—é—â–∏–π":
        partner_id = user['partner_id']
        
        if partner_id:
            await update_user(partner_id, partner_id=None, state='menu')
            await safe_send_message(partner_id, "üîç –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏—â–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", reply_markup=get_main_menu())
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        await update_user(user_id, partner_id=None, state='searching')
        await searching_queue.add(user_id)
        
        queue_size = len(searching_queue)
        await message.answer(
            f"üîÑ –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n"
            f"üë• –í –æ—á–µ—Ä–µ–¥–∏: {queue_size} —á–µ–ª–æ–≤–µ–∫",
            reply_markup=get_searching_menu()
        )
        return

    if message.text == "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
        if not user['partner_id']:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã.")
            return
            
        await message.answer(
            "üìù –û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã (1-100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        await update_user(user_id, state='reporting')
        return

# ================================
#        –°–ò–°–¢–ï–ú–ê –ñ–ê–õ–û–ë
# ================================

@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await update_user(user_id, state='menu')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã
    if user['state'] == 'reporting':
        reason = message.text.strip()
        
        if len(reason) > 100:
            await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        if len(reason) < 1:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã.")
            return
        
        partner_id = user['partner_id']
        if not partner_id:
            await message.answer("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await update_user(user_id, state='menu')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É
        await add_report(user_id, partner_id, reason)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö
        await update_user(user_id, state='menu', partner_id=None)
        await update_user(partner_id, state='menu', partner_id=None)
        
        await message.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=get_main_menu())
        await safe_send_message(partner_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.", reply_markup=get_main_menu())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
        reports_count = await get_reports_count(partner_id)
        if reports_count >= 3:
            await ban_user(partner_id)
            await safe_send_message(partner_id, "üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if MODERATOR_ID:
            await safe_send_message(
                MODERATOR_ID,
                f"üö® –ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê\n\n"
                f"–û—Ç: {hash_id(user_id)}\n"
                f"–ù–∞: {hash_id(partner_id)}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–í—Å–µ–≥–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reports_count}"
            )
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    if user['state'] == 'chat' and user['partner_id']:
        try:
            await safe_send_message(user['partner_id'], message.text)
        except Exception as e:
            logging.error(f"Error forwarding message: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ================================
#        –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨
# ================================

@dp.callback_query(lambda c: c.data.startswith("mod_"))
async def mod_callbacks(callback: types.CallbackQuery):
    if callback.from_user.id != MODERATOR_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    data = callback.data

    if data == "mod_chats":
        users = await get_all_users()
        chats = []
        seen = set()
        
        for user in users:
            if (user['partner_id'] and user['partner_id'] not in seen 
                and user['state'] == 'chat'):
                p1, p2 = user['tg_id'], user['partner_id']
                seen.add(p1)
                seen.add(p2)
                chats.append((p1, p2))
        
        if not chats:
            await callback.message.edit_text("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=get_mod_menu())
            return
        
        text = "üìä –ê–ö–¢–ò–í–ù–´–ï –ß–ê–¢–´:\n\n"
        kb = []
        for i, (u1, u2) in enumerate(chats, 1):
            h1, h2 = hash_id(u1), hash_id(u2)
            text += f"–ß–∞—Ç #{i}: {h1} ‚Üî {h2}\n"
            kb.append([InlineKeyboardButton(text=f"–ß–∞—Ç #{i}", callback_data=f"view_chat_{u1}_{u2}")])
        
        kb.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")])
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

    elif data.startswith("view_chat_"):
        _, _, u1, u2 = data.split("_")
        u1, u2 = int(u1), int(u2)
        await callback.message.edit_text(
            f"üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ {hash_id(u1)} ‚Üî {hash_id(u2)}\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_chats")]
            ])
        )

    elif data == "mod_reports":
        reports = await get_all_reports()
        if not reports:
            await callback.message.edit_text("üìù –ñ–∞–ª–æ–± –Ω–µ—Ç.", reply_markup=get_mod_menu())
            return
        
        text = "üìù –ü–û–°–õ–ï–î–ù–ò–ï –ñ–ê–õ–û–ë–´:\n\n"
        for r in reports[:10]:
            text += f"üë§ {hash_id(r['reporter_id'])} ‚Üí {hash_id(r['reported_id'])}\n"
            text += f"üìã –ü—Ä–∏—á–∏–Ω–∞: {r['reason']}\n"
            text += f"üïí {r['timestamp'].strftime('%d.%m %H:%M')}\n\n"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_stats":
        total_users, active_chats, total_reports = await get_stats()
        in_queue = len(searching_queue)
        reports_today = await get_reports_today()
        
        text = (
            f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
            f"üîç –í –ø–æ–∏—Å–∫–µ: {in_queue}\n"
            f"üìù –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {total_reports}\n"
            f"üìÖ –ñ–∞–ª–æ–± —Å–µ–≥–æ–¥–Ω—è: {reports_today}\n"
            f"üéØ –†–µ–∂–∏–º: –°–õ–£–ß–ê–ô–ù–´–ï –ü–ê–†–´"
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_ban":
        await callback.message.edit_text(
            "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="mod_back")]
            ])
        )
        await update_user(callback.from_user.id, state='mod_banning')

    elif data == "mod_queue":
        queue_users = await searching_queue.get_queue_info()
        if not queue_users:
            await callback.message.edit_text("üë• –û—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=get_mod_menu())
            return
        
        text = f"üë• –û–ß–ï–†–ï–î–¨ –ü–û–ò–°–ö–ê ({len(queue_users)}):\n\n"
        for i, user_id in enumerate(queue_users, 1):
            user_data = await get_user(user_id)
            wait_time = "–Ω–µ–¥–∞–≤–Ω–æ"
            if user_data and user_data.get('last_active'):
                from datetime import datetime
                wait_seconds = (datetime.now() - user_data['last_active']).total_seconds()
                if wait_seconds > 60:
                    wait_time = f"{int(wait_seconds/60)} –º–∏–Ω"
            
            text += f"{i}. {hash_id(user_id)} - –∂–¥—ë—Ç {wait_time}\n"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mod_back")]
        ]))

    elif data == "mod_back":
        await callback.message.edit_text("üõ† –ú–û–î–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨", reply_markup=get_mod_menu())

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
@dp.message(lambda m: m.from_user.id == MODERATOR_ID)
async def mod_ban_execute(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user or user['state'] != 'mod_banning':
        return
        
    try:
        target_id = int(message.text.strip())
        await ban_user(target_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hash_id(target_id)} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 24 —á–∞—Å–∞.", 
            reply_markup=get_mod_menu()
        )
        await update_user(message.from_user.id, state='mod_menu')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await safe_send_message(target_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ 24 —á–∞—Å–∞.")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=get_mod_menu())
    except Exception as e:
        logging.error(f"Ban error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_mod_menu())

# ================================
#           –ó–ê–ü–£–°–ö
# ================================

async def on_startup(app):
    logging.info("Starting bot with RANDOM matching...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(start_search_loop())
    asyncio.create_task(cleanup_queue_loop())
    
    logging.info("Bot started successfully with RANDOM matching algorithm!")

async def on_shutdown(app):
    logging.info("Shutting down bot...")
    await bot.session.close()

def main():
    app = web.Application()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path="/webhook")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_application(app, dp, bot=bot)
    
    # Health check
    app.router.add_get("/health", lambda r: web.Response(text="OK"))
    
    # –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
